name: CI/CD Pipeline

on:
  push:
    branches: [ main ]    # or your default branch
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL:    ${{ secrets.DATABASE_URL }}
      NEXTAUTH_URL:    ${{ secrets.NEXTAUTH_URL }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      OPENAI_API_KEY:  ${{ secrets.OPENAI_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build Next.js
        run: npm run build

      - name: Lint & Test
        run: |
          npm run lint
          npm test

  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}    # e.g. docker.io or registry.digitalocean.com/your-repo
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & tag Docker image
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}
          docker build \
            --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            -t $IMAGE .
          docker tag $IMAGE ${{ secrets.DOCKER_USERNAME }}/myapp:latest

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no \
          -p ${{ secrets.SSH_PORT }} \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            docker pull ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/myapp:latest
            docker stop myapp || true
            docker rm myapp || true
            docker run -d \
              --name myapp \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}" \
              -e NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -p 3000:3000 \
              ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/myapp:latest
          EOF
